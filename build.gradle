plugins {
  id 'application'
  id 'checkstyle'
  id 'jacoco'
  id 'java'
  id "io.freefair.lombok" version "8.14"
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.springframework.boot' version '3.5.4'
  id 'com.github.kt3k.coveralls' version '2.12.2'
  id 'hmcts.ccd.sdk' version '5.6.0'
  id 'com.github.ben-manes.versions' version '0.51.0'
  id 'org.sonarqube' version '6.0.1.5171'
  id 'uk.gov.hmcts.java' version '0.12.67'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test).configureEach {
  useJUnitPlatform()

  testLogging {
    events "passed", "skipped", "failed"
    exceptionFormat "full"
    showStandardStreams = true
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

tasks.register('functional', Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

tasks.register('integration', Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

tasks.register('fortifyScan', JavaExec) {
  main = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
  ignoreExitValue = true
}

tasks.register('smoke', Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

checkstyle {
  maxWarnings = 0
  toolVersion = '10.21.0'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    html.required = true
    csv.required = false
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport
project.tasks['check'].dependsOn integration

sonarqube {
  properties {
    property "sonar.projectName", "nfdiv-ccd-case-migration"
    property "sonar.projectKey", "nfdiv-ccd-case-migration"
    property "sonar.exclusions", "**/model/*.java,**/exception/*.java,**/domain/*.java,**/common/*.java,**/migration/auth/AuthTokenGeneratorConfiguration.java,**/migration/CaseMigrationRunner.java,**/ccd/HttpMessageConverterConfiguration.java, **/deserializer/*.java"
    property "sonar.coverage.jacoco.xmlReportPaths", "${layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml").get()}"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

apply from: './gradle/suppress.gradle'
// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url 'https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1'
  }
}

ext {
  log4JVersion = "2.25.1"
  restAssuredVersion = '4.3.0!!'
  lombokVersion = "1.18.38"
  junit_version = "4.12"
  junitJupiterVersion = '5.9.3'
  junitVintageVersion = '5.11.3'
  powermockVersion = '2.0.9'
  springSecurity   =  '6.4.2'
  springCloudVersion = '2025.0.0'
}

ext['jackson.version'] = '2.15.3'
ext['snakeyaml.version'] = '2.0'
ext['spring-security.version'] = '6.4.2'

dependencies {
  implementation group: 'org.springframework.security', name: 'spring-security-web', version: springSecurity
  implementation group: 'org.springframework.security', name: 'spring-security-core', version: springSecurity
  implementation group: 'org.springframework.security', name: 'spring-security-config', version: springSecurity
  implementation group: 'org.springframework.security', name: 'spring-security-oauth2-resource-server', version: springSecurity
  implementation group: 'org.springframework.security', name: 'spring-security-oauth2-client', version: springSecurity
  implementation group: 'org.springframework.security', name: 'spring-security-oauth2-jose', version: springSecurity
  implementation("org.springframework.cloud:spring-cloud-starter-bootstrap")
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework', name: 'spring-context-support'
  implementation group: 'com.github.hmcts', name: 'idam-java-client', version: '3.0.4'
  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '5.3.3'
  implementation group: 'com.github.hmcts', name: 'core-case-data-store-client', version: '5.1.1'
  implementation 'org.apache.tomcat.embed:tomcat-embed-websocket:11.0.8'
  implementation 'org.apache.tomcat.embed:tomcat-embed-core:11.0.8'

  implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.8.0'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.1.9'

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion
  testImplementation group: 'io.rest-assured', name: 'rest-assured', version: '5.5.5'

  testImplementation (group: 'org.springframework.boot', name: 'spring-boot-starter-test') {
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  implementation group: 'org.projectlombok', name: 'lombok', version: lombokVersion
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
  testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion

  testImplementation group: 'com.github.hmcts', name: 'fortify-client', version: '1.4.9', classifier: 'all'

  implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.6.0'
  implementation group: 'commons-io', name: 'commons-io', version: '2.20.0'
  implementation group: 'org.springframework.security', name: 'spring-security-oauth2-resource-server', version: springSecurity
  implementation group: 'org.springframework.security', name: 'spring-security-oauth2-client', version: springSecurity
  implementation group: 'org.springframework.security', name: 'spring-security-oauth2-jose', version: springSecurity
  implementation group: 'org.springframework.security', name: 'spring-security-oauth2-core', version: springSecurity
  implementation group: 'org.springframework.security', name: 'spring-security-config', version: springSecurity
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }

  dependencies {
    dependency 'com.google.guava:guava:33.4.8-jre'
    dependency 'org.apache.commons:commons-lang3:3.18.0'

    dependencySet(group: 'commons-beanutils', version: '1.11.0') {
      entry 'commons-beanutils'
    }

    dependencySet(group: 'io.rest-assured', version: '5.5.5') {
      entry 'json-path'
      entry 'xml-path'
    }
    dependencySet(group: 'org.codehaus.groovy', version: '3.0.25') {
      entry 'groovy'
      entry 'groovy-xml'
      entry 'groovy-json'
    }
  }
}

mainClassName = 'uk.gov.hmcts.reform.migration.CaseMigrationRunner'

bootJar {
  archiveFileName = 'ccd-case-migration.jar'
  archiveBaseName = 'ccd-case-migration'
  archiveVersion = project.version.toString()
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

configurations.configureEach {
  exclude group: 'org.bouncycastle', module: 'bcprov-jdk15on'
  exclude group: 'org.springframework.boot', module: 'spring-boot-starter-security'
  exclude group: 'org.springframework.security', module: 'spring-security-rsa'
}

test {
  timeout = Duration.ofMinutes(30)
  environment("AZURE_APPLICATIONINSIGHTS_INSTRUMENTATIONKEY", "some-key")
  systemProperty 'java.locale.providers', 'COMPAT'

  useJUnitPlatform()

  testLogging {
    events "failed"
    exceptionFormat "short"

    debug {
      events "passed", "started", "skipped", "failed"
      exceptionFormat "full"
    }

    info.events = ["failed", "skipped"]
  }

  reports {
    html.required = true
  }

  jvmArgs = [
    '--add-modules', 'java.se',
    '--add-exports', 'java.base/jdk.internal.ref=ALL-UNNAMED',
    '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
    '--add-opens', 'java.base/java.nio=ALL-UNNAMED',
    '--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED',
    '--add-opens', 'java.management/sun.management=ALL-UNNAMED',
    '--add-opens', 'jdk.management/com.sun.management.internal=ALL-UNNAMED'
  ]
}

